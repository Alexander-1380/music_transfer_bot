#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import logging
from pathlib import Path
from typing import Optional

from dotenv import load_dotenv

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=os.environ.get("LOGLEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("music-transfer-bot")

# === –ó–ê–ì–†–£–ó–ö–ê .env (—Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ) ===
for p in (Path(__file__).with_name(".env"), Path(__file__).parents[1] / ".env"):
    if p.exists():
        load_dotenv(p)
        break

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
PUBLIC_URL         = os.getenv("PUBLIC_URL", "").rstrip("/")  # –Ω–∞–ø—Ä. https://music-transfer-bot.getsome.work/tg-bot
WEBHOOK_SECRET     = os.getenv("WEBHOOK_SECRET", "").strip()
PORT               = int(os.getenv("PORT", "8080"))
LISTEN_ADDR        = os.getenv("LISTEN_ADDR", "0.0.0.0")  # –ø–æ–¥ nginx –æ–±—ã—á–Ω–æ 127.0.0.1 –∏–ª–∏ 0.0.0.0

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is missing in environment/.env")

# === –ò–ú–ü–û–†–¢ –Ø–î–†–ê ===
import ya2spotify
from ya2spotify import resolve_url  # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–Ø–Ω–¥–µ–∫—Å <-> Spotify)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ –ª–æ–≥–∏ ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≥—Ä—É–∑–∏—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
log.info(
    "[BOOT] bot.py path=%s | cwd=%s | ya2spotify=%s | venv=%s",
    __file__,
    os.getcwd(),
    getattr(ya2spotify, "__file__", "unknown"),
    os.getenv("VIRTUAL_ENV", ""),
)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ===
URL_RE = re.compile(r'https?://\S+', re.IGNORECASE)

def extract_first_url(text: str) -> Optional[str]:
    m = URL_RE.search(text or "")
    return m.group(0) if m else None


def format_result(res: dict) -> str:
    """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É resolve_url()."""
    if not res.get("ok"):
        return f"‚ö†Ô∏è {res.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.')}"
    tgt = res.get("target", {})
    svc = tgt.get("service", "unknown")
    typ = tgt.get("type", "unknown")
    url = tgt.get("url", "‚Äî")

    # –Ω–µ–º–Ω–æ–≥–æ –±–æ–≥–∞—á–µ —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    lines = [f"‚úÖ <b>{svc}</b> / <i>{typ}</i>"]
    if "title" in tgt:
        lines.append(f"‚Ä¢ Title: <code>{tgt['title']}</code>")
    if "artists" in tgt and tgt["artists"]:
        lines.append(f"‚Ä¢ Artist(s): <code>{', '.join(tgt['artists'])}</code>")
    if "album" in tgt and tgt["album"]:
        lines.append(f"‚Ä¢ Album: <code>{tgt['album']}</code>")
    lines.append(f"‚Ä¢ Link: {url}")
    return "\n".join(lines)


# === –•–≠–ù–î–õ–ï–†–´ ===
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø MusicTransferBot üéµ\n\n"
        "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–∑ <b>–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏</b> –∏–ª–∏ <b>Spotify</b> ‚Äî "
        "—è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω—É —Å—Å—ã–ª–∫—É –≤ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–∏—Å–µ.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ç—Ä–µ–∫–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏, –∞–ª—å–±–æ–º—ã."
    )
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)


async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    url = extract_first_url(text)
    if not url:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫—É –∏–ª–∏ Spotify.")
        return

    try:
        res = resolve_url(url)  # –≤–Ω—É—Ç—Ä–∏ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        reply = format_result(res)
        await update.message.reply_text(reply, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        log.exception("Resolve failed: %r", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e!r}")


# === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # —Ä–æ—É—Ç–∏–Ω–≥
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))

    if PUBLIC_URL:
        # –†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–∞ –∑–∞ Nginx: PUBLIC_URL ‚Äî –ø–æ–ª–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –ø—É—Ç—å –¥–æ –ø—Ä–æ–∫—Å–∏-–ª–æ–∫–∞—Ü–∏–∏, –Ω–∞–ø—Ä.
        #   https://music-transfer-bot.getsome.work/tg-bot
        # –í nginx location /tg-bot/ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –Ω–∞ 127.0.0.1:8080/
        webhook_url = PUBLIC_URL  # –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ / ‚Äî –æ–∫
        log.info("Starting webhook: %s -> http://%s:%s/", webhook_url, LISTEN_ADDR, PORT)

        app.run_webhook(
            listen=LISTEN_ADDR,
            port=PORT,
            url_path="",  # –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞ / (–ª–æ–∫–∞–ª—å–Ω–æ –∑–∞ –ø—Ä–æ–∫—Å–∏)
            webhook_url=webhook_url,  # –≤–Ω–µ—à–Ω–∏–π –ø—É—Ç—å
            secret_token=WEBHOOK_SECRET or None,
            drop_pending_updates=True,
        )
    else:
        # –§–æ–ª–±—ç–∫: polling (—É–¥–æ–±–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ)
        log.warning("PUBLIC_URL is not set ‚Äî running in polling mode")
        app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == "__main__":
    main()